// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	contract "github.com/evgrep/simplyws/internal/data/contract"
	mock "github.com/stretchr/testify/mock"
)

// DataProviderInt is an autogenerated mock type for the DataProviderInt type
type DataProviderInt struct {
	mock.Mock
}

// GetEntities provides a mock function with given fields: params
func (_m *DataProviderInt) GetEntities(params *contract.GetEntitiesDbParams) ([]contract.Entity, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetEntities")
	}

	var r0 []contract.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(*contract.GetEntitiesDbParams) ([]contract.Entity, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*contract.GetEntitiesDbParams) []contract.Entity); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contract.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(*contract.GetEntitiesDbParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataProviderInt creates a new instance of DataProviderInt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataProviderInt(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataProviderInt {
	mock := &DataProviderInt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
